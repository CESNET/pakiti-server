<?php
# Copyright (c) 2017, CESNET. All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#   o Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the following
#     disclaimer.
#   o Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials
#     provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

/**
 * @author Michal Prochazka
 */
class VulnerabilityDao
{
    private $db;

    public function __construct(DbManager &$dbManager)
    {
        $this->db = $dbManager;
    }

    /**
     * Stores the vulnerability in the DB
     */
    public function create(Vulnerability &$vulnerability)
    {
        $this->db->query("insert into Vulnerability set
            operator='" . $this->db->escape($vulnerability->getOperator()) . "',
            cveDefId=" . $this->db->escape($vulnerability->getCveDefId()) . ",
            osGroupId=" . $this->db->escape($vulnerability->getOsGroupId()) . ",
            name=" . $this->db->escape($vulnerability->getName()) . ",
            version=" . $this->db->escape($vulnerability->getVersion()) . ",
            release=" . $this->db->escape($vulnerability->getRelease()) . ",
            arch=" . $this->db->escape($vulnerability->getArch()));

        # Set the newly assigned id
        $vulnerability->setId($this->db->getLastInsertedId());
    }

    /**
     * Stores multiple vulnerabilities, using insert ignore to avoid errors during duplicates
     */
    public function createMultiple(&$vulnerabilities)
    {
        # If vulnerabilities is not an array, then quit
        if (!is_array($vulnerabilities)) {
            return;
        }
        $sql = 'insert ignore into Vulnerability (`name`, version, `release`, `arch`, operator, `cveDefId`, osGroupId) values ';
        $firstEntry = true;
        foreach ($vulnerabilities as $vuln) {
            # Do not add comma before first entry
            if ($firstEntry) {
                $firstEntry = false;
            } else {
                $sql .=',';
            }
            $sql .= "('".$vuln->getName()."', '".$vuln->getVersion()."','".$vuln->getRelease()."', '".$vuln->getArch()."', '".$vuln->getOperator()."',".
                $vuln->getCveDefId().',' .$vuln->getOsGroupId().')';
        }
        $this->db->query($sql);
    }

    /**
     * Get the vulnerability by its ID
     */
    public function getById($id)
    {
        if (!is_numeric($id)) {
            return null;
        }
        return $this->db->queryObject("select id as _id, name as _name, version as _version,
            `release` as _release, arch as _arch, operator as _operator, cveDefId as _cveDefId,
            osGroupId as _osGroupId from Vulnerability
            where id = '" . $this->db->escape($id) . "'", "Vulnerability");
    }

    /**
     * Update the vulnerability in the DB
     */
    public function update(Vulnerability &$vulnerability)
    {
        $this->db->query("update Vulnerability set
            operator='" . $this->db->escape($vulnerability->getOperator()) . "',
            cveDefId=" . $this->db->escape($vulnerability->getCveDefId()) . ",
            osGroupId=" . $this->db->escape($vulnerability->getOsGroupId()) . ",
            name='" . $this->db->escape($vulnerability->getName()) . "',
            version='" . $this->db->escape($vulnerability->getVersion()) . "',
            `release`='" . $this->db->escape($vulnerability->getRelease()) . "',
            arch='" . $this->db->escape($vulnerability->getArch()) . "'
            where id=" . $this->db->escape($vulnerability->getId()));
    }

    /**
     * Delete the vulnerability from the DB
     */
    public function delete(Vulnerability &$vulnerability)
    {
        $this->db->query("delete from Vulnerability where id=" . $vulnerability->getId());
    }

    /**
     * Get Vulnerabilities by CveDefs Ids (array) and Os Id
     * @param Vulnerability $vulnerability
     */
    public function getVulnerabilitiesByCveDefsIdsAndOsGroupId($cveDefsIds, $osGroupsIds)
    {
        if (empty($cveDefsIds) || empty($osGroupsIds)) {
            return array();
        }
        return $this->db->queryObjects("select id as _id, name as _name, version as _version,
            arch as _arch, `release` as _release, osGroupId as _osGroupId,
            operator as _operator, cveDefId as _cveDefId from Vulnerability
            where cveDefId in (" . implode(",", array_map("intval", $cveDefsIds)) . ") and osGroupId in (" . implode(",", array_map("intval", $osGroupsIds)) . ")", "Vulnerability");
    }

    public function getIdsByCveNameAndOs($cveName, $osId = -1)
    {
        $sql = "select Vulnerability.id from Vulnerability
            inner join Cve on (Vulnerability.cveDefId = Cve.cveDefId and Cve.name = '" . $this->db->escape($cveName) . "')";
        if ($osId != -1) {
            $sql .= " inner join OsOsGroup on Vulnerability.osGroupId = OsOsGroup.osGroupId and OsOsGroup.osId = '" . $this->db->escape($osId) . "'";
        }
        $sql .= " order by Vulnerability.name";
        return $this->db->queryToSingleValueMultiRow($sql);
    }

    /**
     * Return array of Vulnerabilities for a specific Package name and arch
     * @param $name
     * @return array
     */
    public function getVulnerabilitiesByPkgNameArch($pkgName, $pkgArch)
    {
        $sql = "select id as _id, name as _name, version as _version,
            `release` as _release, arch as _arch, osGroupId as _osGroupId,
            operator as _operator, cveDefId as _cveDefId from Vulnerability
            where name='" . $this->db->escape($pkgName) . "' and (Vulnerability.arch='all' or Vulnerability.arch='" . $this->db->escape($pkgArch) . "')";

        # Create objects
        $vulnerabilities = $this->db->queryObjects($sql, "Vulnerability");

        if ($vulnerabilities == null) {
            $vulnerabilities = array();
        }
        return $vulnerabilities;
    }
}
