<?php
# Copyright (c) 2011, CESNET. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 
#   o Redistributions of source code must retain the above
#     copyright notice, this list of conditions and the following
#     disclaimer.
#   o Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials
#     provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE. 

class VulnerabilityDao
{
    private $db;

    public function __construct(DbManager &$dbManager)
    {
        $this->db = $dbManager;
    }

    /*******************
     * Public functions
     *******************/

    /*
     * Stores the vulnerability in the DB
     */
    public function create(Vulnerability &$vulnerability)
    {
        $this->db->query(
            "insert into Vulnerability set
      	operator='" . $this->db->escape($vulnerability->getOperator()) . "',
      	cveDefId=" . $this->db->escape($vulnerability->getCveDefId()) . ",
      	osGroupId=" . $this->db->escape($vulnerability->getOsGroupId()) . ",
      	pkgId=" . $this->db->escape($vulnerability->getPkgId())
        );

        # Set the newly assigned id
        $vulnerability->setId($this->db->getLastInsertedId());
    }

    /*
     * Stores multiple vulnerabilities, using insert ignore to avoid errors during duplicates
     */
    public function createMultiple(&$vulnerabilities)
    {
        # If vulnerabilities is not an array, then quit
        if (!is_array($vulnerabilities) or empty($vulnerabilities)) return;

        $sql = 'insert ignore into Vulnerability (operator, cveDefId, osGroupId, pkgId) values ';
        $firstEntry = true;
        foreach ($vulnerabilities as $vuln) {
            # Do not add comma before first entry
            if ($firstEntry) {
                $firstEntry = false;
            } else {
                $sql .= ',';
            }

            $sql .= "('" . $vuln->getOperator() . "'," . $vuln->getCveDefId() . ',' . $vuln->getOsGroupId() . ',' . $vuln->getPkgId() . ')';
        }

        $this->db->query($sql);
    }

    /*
     * Get the vulnerability by its ID
     */
    public function getById($id)
    {
        if (!is_numeric($id)) return null;
        return $this->db->queryObject(
            "select
    		id as _id, pkgId as _pkgId, operator as _operator, cveDefId as _cveDefId,
		osGroupId as _osGroupId
      from 
      	Vulnerability 
      where
      	id=" . $this->db->escape($id)
            , "Vulnerability");
    }

    /*
     * Update the vulnerability in the DB
     */
    public function update(Vulnerability &$vulnerability)
    {
        $this->db->query(
            "update Vulnerability set
      	operator='" . $this->db->escape($vulnerability->getOperator()) . "',
      	cveDefId=" . $this->db->escape($vulnerability->getCveDefId()) . ",
      	osGroupId=" . $this->db->escape($vulnerability->getOsGroupId()) . ",
      	pkgId=" . $this->db->escape($vulnerability->getPkgId()) . "
      where id=" . $this->db->escape($vulnerability->getId()));
    }

    /*
     * Delete the vulnerability from the DB
     */
    public function delete(Vulnerability &$vulnerability)
    {
        $this->db->query(
            "delete from Vulnerability where id=" . $vulnerability->getId());
    }
}

?>
